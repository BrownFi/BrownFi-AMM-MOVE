import {
  require_object_assign
} from "./chunk-SOVR4GXP.js";
import {
  __esm,
  __export,
  __toESM
} from "./chunk-7REXU52E.js";

// node_modules/@styled-system/css/dist/index.esm.js
var index_esm_exports = {};
__export(index_esm_exports, {
  css: () => css,
  default: () => index_esm_default,
  get: () => get,
  responsive: () => responsive
});
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var get, defaultBreakpoints, defaultTheme, aliases, multiples, scales, positiveOrNegative, transforms, responsive, css, index_esm_default;
var init_index_esm = __esm({
  "node_modules/@styled-system/css/dist/index.esm.js"() {
    get = function get2(obj, key, def, p, undef) {
      key = key && key.split ? key.split(".") : [key];
      for (p = 0; p < key.length; p++) {
        obj = obj ? obj[key[p]] : undef;
      }
      return obj === undef ? def : obj;
    };
    defaultBreakpoints = [40, 52, 64].map(function(n) {
      return n + "em";
    });
    defaultTheme = {
      space: [0, 4, 8, 16, 32, 64, 128, 256, 512],
      fontSizes: [12, 14, 16, 20, 24, 32, 48, 64, 72]
    };
    aliases = {
      bg: "backgroundColor",
      m: "margin",
      mt: "marginTop",
      mr: "marginRight",
      mb: "marginBottom",
      ml: "marginLeft",
      mx: "marginX",
      my: "marginY",
      p: "padding",
      pt: "paddingTop",
      pr: "paddingRight",
      pb: "paddingBottom",
      pl: "paddingLeft",
      px: "paddingX",
      py: "paddingY"
    };
    multiples = {
      marginX: ["marginLeft", "marginRight"],
      marginY: ["marginTop", "marginBottom"],
      paddingX: ["paddingLeft", "paddingRight"],
      paddingY: ["paddingTop", "paddingBottom"],
      size: ["width", "height"]
    };
    scales = {
      color: "colors",
      backgroundColor: "colors",
      borderColor: "colors",
      margin: "space",
      marginTop: "space",
      marginRight: "space",
      marginBottom: "space",
      marginLeft: "space",
      marginX: "space",
      marginY: "space",
      padding: "space",
      paddingTop: "space",
      paddingRight: "space",
      paddingBottom: "space",
      paddingLeft: "space",
      paddingX: "space",
      paddingY: "space",
      top: "space",
      right: "space",
      bottom: "space",
      left: "space",
      gridGap: "space",
      gridColumnGap: "space",
      gridRowGap: "space",
      gap: "space",
      columnGap: "space",
      rowGap: "space",
      fontFamily: "fonts",
      fontSize: "fontSizes",
      fontWeight: "fontWeights",
      lineHeight: "lineHeights",
      letterSpacing: "letterSpacings",
      border: "borders",
      borderTop: "borders",
      borderRight: "borders",
      borderBottom: "borders",
      borderLeft: "borders",
      borderWidth: "borderWidths",
      borderStyle: "borderStyles",
      borderRadius: "radii",
      borderTopRightRadius: "radii",
      borderTopLeftRadius: "radii",
      borderBottomRightRadius: "radii",
      borderBottomLeftRadius: "radii",
      borderTopWidth: "borderWidths",
      borderTopColor: "colors",
      borderTopStyle: "borderStyles",
      borderBottomWidth: "borderWidths",
      borderBottomColor: "colors",
      borderBottomStyle: "borderStyles",
      borderLeftWidth: "borderWidths",
      borderLeftColor: "colors",
      borderLeftStyle: "borderStyles",
      borderRightWidth: "borderWidths",
      borderRightColor: "colors",
      borderRightStyle: "borderStyles",
      outlineColor: "colors",
      boxShadow: "shadows",
      textShadow: "shadows",
      zIndex: "zIndices",
      width: "sizes",
      minWidth: "sizes",
      maxWidth: "sizes",
      height: "sizes",
      minHeight: "sizes",
      maxHeight: "sizes",
      flexBasis: "sizes",
      size: "sizes",
      // svg
      fill: "colors",
      stroke: "colors"
    };
    positiveOrNegative = function positiveOrNegative2(scale, value) {
      if (typeof value !== "number" || value >= 0) {
        return get(scale, value, value);
      }
      var absolute = Math.abs(value);
      var n = get(scale, absolute, absolute);
      if (typeof n === "string")
        return "-" + n;
      return n * -1;
    };
    transforms = ["margin", "marginTop", "marginRight", "marginBottom", "marginLeft", "marginX", "marginY", "top", "bottom", "left", "right"].reduce(function(acc, curr) {
      var _extends2;
      return _extends({}, acc, (_extends2 = {}, _extends2[curr] = positiveOrNegative, _extends2));
    }, {});
    responsive = function responsive2(styles) {
      return function(theme) {
        var next = {};
        var breakpoints = get(theme, "breakpoints", defaultBreakpoints);
        var mediaQueries = [null].concat(breakpoints.map(function(n) {
          return "@media screen and (min-width: " + n + ")";
        }));
        for (var key in styles) {
          var value = typeof styles[key] === "function" ? styles[key](theme) : styles[key];
          if (value == null)
            continue;
          if (!Array.isArray(value)) {
            next[key] = value;
            continue;
          }
          for (var i = 0; i < value.slice(0, mediaQueries.length).length; i++) {
            var media = mediaQueries[i];
            if (!media) {
              next[key] = value[i];
              continue;
            }
            next[media] = next[media] || {};
            if (value[i] == null)
              continue;
            next[media][key] = value[i];
          }
        }
        return next;
      };
    };
    css = function css2(args) {
      return function(props2) {
        if (props2 === void 0) {
          props2 = {};
        }
        var theme = _extends({}, defaultTheme, {}, props2.theme || props2);
        var result = {};
        var obj = typeof args === "function" ? args(theme) : args;
        var styles = responsive(obj)(theme);
        for (var key in styles) {
          var x = styles[key];
          var val = typeof x === "function" ? x(theme) : x;
          if (key === "variant") {
            var variant3 = css2(get(theme, val))(theme);
            result = _extends({}, result, {}, variant3);
            continue;
          }
          if (val && typeof val === "object") {
            result[key] = css2(val)(theme);
            continue;
          }
          var prop = get(aliases, key, key);
          var scaleName = get(scales, prop);
          var scale = get(theme, scaleName, get(theme, prop, {}));
          var transform = get(transforms, prop, get);
          var value = transform(scale, val, val);
          if (multiples[prop]) {
            var dirs = multiples[prop];
            for (var i = 0; i < dirs.length; i++) {
              result[dirs[i]] = value;
            }
          } else {
            result[prop] = value;
          }
        }
        return result;
      };
    };
    index_esm_default = css;
  }
});

// node_modules/@styled-system/core/dist/index.esm.js
var import_object_assign, merge, sort, defaults, createMediaQuery, getValue, get3, createParser, parseResponsiveStyle, parseResponsiveObject, createStyleFunction, system, compose;
var init_index_esm2 = __esm({
  "node_modules/@styled-system/core/dist/index.esm.js"() {
    import_object_assign = __toESM(require_object_assign());
    merge = function merge2(a, b) {
      var result = (0, import_object_assign.default)({}, a, b);
      for (var key in a) {
        var _assign;
        if (!a[key] || typeof b[key] !== "object")
          continue;
        (0, import_object_assign.default)(result, (_assign = {}, _assign[key] = (0, import_object_assign.default)(a[key], b[key]), _assign));
      }
      return result;
    };
    sort = function sort2(obj) {
      var next = {};
      Object.keys(obj).sort(function(a, b) {
        return a.localeCompare(b, void 0, {
          numeric: true,
          sensitivity: "base"
        });
      }).forEach(function(key) {
        next[key] = obj[key];
      });
      return next;
    };
    defaults = {
      breakpoints: [40, 52, 64].map(function(n) {
        return n + "em";
      })
    };
    createMediaQuery = function createMediaQuery2(n) {
      return "@media screen and (min-width: " + n + ")";
    };
    getValue = function getValue2(n, scale) {
      return get3(scale, n, n);
    };
    get3 = function get4(obj, key, def, p, undef) {
      key = key && key.split ? key.split(".") : [key];
      for (p = 0; p < key.length; p++) {
        obj = obj ? obj[key[p]] : undef;
      }
      return obj === undef ? def : obj;
    };
    createParser = function createParser2(config9) {
      var cache = {};
      var parse = function parse2(props2) {
        var styles = {};
        var shouldSort = false;
        var isCacheDisabled = props2.theme && props2.theme.disableStyledSystemCache;
        for (var key in props2) {
          if (!config9[key])
            continue;
          var sx = config9[key];
          var raw = props2[key];
          var scale = get3(props2.theme, sx.scale, sx.defaults);
          if (typeof raw === "object") {
            cache.breakpoints = !isCacheDisabled && cache.breakpoints || get3(props2.theme, "breakpoints", defaults.breakpoints);
            if (Array.isArray(raw)) {
              cache.media = !isCacheDisabled && cache.media || [null].concat(cache.breakpoints.map(createMediaQuery));
              styles = merge(styles, parseResponsiveStyle(cache.media, sx, scale, raw, props2));
              continue;
            }
            if (raw !== null) {
              styles = merge(styles, parseResponsiveObject(cache.breakpoints, sx, scale, raw, props2));
              shouldSort = true;
            }
            continue;
          }
          (0, import_object_assign.default)(styles, sx(raw, scale, props2));
        }
        if (shouldSort) {
          styles = sort(styles);
        }
        return styles;
      };
      parse.config = config9;
      parse.propNames = Object.keys(config9);
      parse.cache = cache;
      var keys = Object.keys(config9).filter(function(k) {
        return k !== "config";
      });
      if (keys.length > 1) {
        keys.forEach(function(key) {
          var _createParser;
          parse[key] = createParser2((_createParser = {}, _createParser[key] = config9[key], _createParser));
        });
      }
      return parse;
    };
    parseResponsiveStyle = function parseResponsiveStyle2(mediaQueries, sx, scale, raw, _props) {
      var styles = {};
      raw.slice(0, mediaQueries.length).forEach(function(value, i) {
        var media = mediaQueries[i];
        var style3 = sx(value, scale, _props);
        if (!media) {
          (0, import_object_assign.default)(styles, style3);
        } else {
          var _assign2;
          (0, import_object_assign.default)(styles, (_assign2 = {}, _assign2[media] = (0, import_object_assign.default)({}, styles[media], style3), _assign2));
        }
      });
      return styles;
    };
    parseResponsiveObject = function parseResponsiveObject2(breakpoints, sx, scale, raw, _props) {
      var styles = {};
      for (var key in raw) {
        var breakpoint = breakpoints[key];
        var value = raw[key];
        var style3 = sx(value, scale, _props);
        if (!breakpoint) {
          (0, import_object_assign.default)(styles, style3);
        } else {
          var _assign3;
          var media = createMediaQuery(breakpoint);
          (0, import_object_assign.default)(styles, (_assign3 = {}, _assign3[media] = (0, import_object_assign.default)({}, styles[media], style3), _assign3));
        }
      }
      return styles;
    };
    createStyleFunction = function createStyleFunction2(_ref) {
      var properties = _ref.properties, property = _ref.property, scale = _ref.scale, _ref$transform = _ref.transform, transform = _ref$transform === void 0 ? getValue : _ref$transform, defaultScale = _ref.defaultScale;
      properties = properties || [property];
      var sx = function sx2(value, scale2, _props) {
        var result = {};
        var n = transform(value, scale2, _props);
        if (n === null)
          return;
        properties.forEach(function(prop) {
          result[prop] = n;
        });
        return result;
      };
      sx.scale = scale;
      sx.defaults = defaultScale;
      return sx;
    };
    system = function system2(args) {
      if (args === void 0) {
        args = {};
      }
      var config9 = {};
      Object.keys(args).forEach(function(key) {
        var conf = args[key];
        if (conf === true) {
          config9[key] = createStyleFunction({
            property: key,
            scale: key
          });
          return;
        }
        if (typeof conf === "function") {
          config9[key] = conf;
          return;
        }
        config9[key] = createStyleFunction(conf);
      });
      var parser = createParser(config9);
      return parser;
    };
    compose = function compose2() {
      var config9 = {};
      for (var _len = arguments.length, parsers = new Array(_len), _key = 0; _key < _len; _key++) {
        parsers[_key] = arguments[_key];
      }
      parsers.forEach(function(parser2) {
        if (!parser2 || !parser2.config)
          return;
        (0, import_object_assign.default)(config9, parser2.config);
      });
      var parser = createParser(config9);
      return parser;
    };
  }
});

// node_modules/@styled-system/layout/dist/index.esm.js
var isNumber, getWidth, config, layout, index_esm_default2;
var init_index_esm3 = __esm({
  "node_modules/@styled-system/layout/dist/index.esm.js"() {
    init_index_esm2();
    isNumber = function isNumber2(n) {
      return typeof n === "number" && !isNaN(n);
    };
    getWidth = function getWidth2(n, scale) {
      return get3(scale, n, !isNumber(n) || n > 1 ? n : n * 100 + "%");
    };
    config = {
      width: {
        property: "width",
        scale: "sizes",
        transform: getWidth
      },
      height: {
        property: "height",
        scale: "sizes"
      },
      minWidth: {
        property: "minWidth",
        scale: "sizes"
      },
      minHeight: {
        property: "minHeight",
        scale: "sizes"
      },
      maxWidth: {
        property: "maxWidth",
        scale: "sizes"
      },
      maxHeight: {
        property: "maxHeight",
        scale: "sizes"
      },
      size: {
        properties: ["width", "height"],
        scale: "sizes"
      },
      overflow: true,
      overflowX: true,
      overflowY: true,
      display: true,
      verticalAlign: true
    };
    layout = system(config);
    index_esm_default2 = layout;
  }
});

// node_modules/@styled-system/color/dist/index.esm.js
var config2, color, index_esm_default3;
var init_index_esm4 = __esm({
  "node_modules/@styled-system/color/dist/index.esm.js"() {
    init_index_esm2();
    config2 = {
      color: {
        property: "color",
        scale: "colors"
      },
      backgroundColor: {
        property: "backgroundColor",
        scale: "colors"
      },
      opacity: true
    };
    config2.bg = config2.backgroundColor;
    color = system(config2);
    index_esm_default3 = color;
  }
});

// node_modules/@styled-system/typography/dist/index.esm.js
var defaults2, config3, typography, index_esm_default4;
var init_index_esm5 = __esm({
  "node_modules/@styled-system/typography/dist/index.esm.js"() {
    init_index_esm2();
    defaults2 = {
      fontSizes: [12, 14, 16, 20, 24, 32, 48, 64, 72]
    };
    config3 = {
      fontFamily: {
        property: "fontFamily",
        scale: "fonts"
      },
      fontSize: {
        property: "fontSize",
        scale: "fontSizes",
        defaultScale: defaults2.fontSizes
      },
      fontWeight: {
        property: "fontWeight",
        scale: "fontWeights"
      },
      lineHeight: {
        property: "lineHeight",
        scale: "lineHeights"
      },
      letterSpacing: {
        property: "letterSpacing",
        scale: "letterSpacings"
      },
      textAlign: true,
      fontStyle: true
    };
    typography = system(config3);
    index_esm_default4 = typography;
  }
});

// node_modules/@styled-system/flexbox/dist/index.esm.js
var config4, flexbox, index_esm_default5;
var init_index_esm6 = __esm({
  "node_modules/@styled-system/flexbox/dist/index.esm.js"() {
    init_index_esm2();
    config4 = {
      alignItems: true,
      alignContent: true,
      justifyItems: true,
      justifyContent: true,
      flexWrap: true,
      flexDirection: true,
      // item
      flex: true,
      flexGrow: true,
      flexShrink: true,
      flexBasis: true,
      justifySelf: true,
      alignSelf: true,
      order: true
    };
    flexbox = system(config4);
    index_esm_default5 = flexbox;
  }
});

// node_modules/@styled-system/grid/dist/index.esm.js
var defaults3, config5, grid, index_esm_default6;
var init_index_esm7 = __esm({
  "node_modules/@styled-system/grid/dist/index.esm.js"() {
    init_index_esm2();
    defaults3 = {
      space: [0, 4, 8, 16, 32, 64, 128, 256, 512]
    };
    config5 = {
      gridGap: {
        property: "gridGap",
        scale: "space",
        defaultScale: defaults3.space
      },
      gridColumnGap: {
        property: "gridColumnGap",
        scale: "space",
        defaultScale: defaults3.space
      },
      gridRowGap: {
        property: "gridRowGap",
        scale: "space",
        defaultScale: defaults3.space
      },
      gridColumn: true,
      gridRow: true,
      gridAutoFlow: true,
      gridAutoColumns: true,
      gridAutoRows: true,
      gridTemplateColumns: true,
      gridTemplateRows: true,
      gridTemplateAreas: true,
      gridArea: true
    };
    grid = system(config5);
    index_esm_default6 = grid;
  }
});

// node_modules/@styled-system/border/dist/index.esm.js
var config6, border, index_esm_default7;
var init_index_esm8 = __esm({
  "node_modules/@styled-system/border/dist/index.esm.js"() {
    init_index_esm2();
    config6 = {
      border: {
        property: "border",
        scale: "borders"
      },
      borderWidth: {
        property: "borderWidth",
        scale: "borderWidths"
      },
      borderStyle: {
        property: "borderStyle",
        scale: "borderStyles"
      },
      borderColor: {
        property: "borderColor",
        scale: "colors"
      },
      borderRadius: {
        property: "borderRadius",
        scale: "radii"
      },
      borderTop: {
        property: "borderTop",
        scale: "borders"
      },
      borderTopLeftRadius: {
        property: "borderTopLeftRadius",
        scale: "radii"
      },
      borderTopRightRadius: {
        property: "borderTopRightRadius",
        scale: "radii"
      },
      borderRight: {
        property: "borderRight",
        scale: "borders"
      },
      borderBottom: {
        property: "borderBottom",
        scale: "borders"
      },
      borderBottomLeftRadius: {
        property: "borderBottomLeftRadius",
        scale: "radii"
      },
      borderBottomRightRadius: {
        property: "borderBottomRightRadius",
        scale: "radii"
      },
      borderLeft: {
        property: "borderLeft",
        scale: "borders"
      },
      borderX: {
        properties: ["borderLeft", "borderRight"],
        scale: "borders"
      },
      borderY: {
        properties: ["borderTop", "borderBottom"],
        scale: "borders"
      }
    };
    config6.borderTopWidth = {
      property: "borderTopWidth",
      scale: "borderWidths"
    };
    config6.borderTopColor = {
      property: "borderTopColor",
      scale: "colors"
    };
    config6.borderTopStyle = {
      property: "borderTopStyle",
      scale: "borderStyles"
    };
    config6.borderTopLeftRadius = {
      property: "borderTopLeftRadius",
      scale: "radii"
    };
    config6.borderTopRightRadius = {
      property: "borderTopRightRadius",
      scale: "radii"
    };
    config6.borderBottomWidth = {
      property: "borderBottomWidth",
      scale: "borderWidths"
    };
    config6.borderBottomColor = {
      property: "borderBottomColor",
      scale: "colors"
    };
    config6.borderBottomStyle = {
      property: "borderBottomStyle",
      scale: "borderStyles"
    };
    config6.borderBottomLeftRadius = {
      property: "borderBottomLeftRadius",
      scale: "radii"
    };
    config6.borderBottomRightRadius = {
      property: "borderBottomRightRadius",
      scale: "radii"
    };
    config6.borderLeftWidth = {
      property: "borderLeftWidth",
      scale: "borderWidths"
    };
    config6.borderLeftColor = {
      property: "borderLeftColor",
      scale: "colors"
    };
    config6.borderLeftStyle = {
      property: "borderLeftStyle",
      scale: "borderStyles"
    };
    config6.borderRightWidth = {
      property: "borderRightWidth",
      scale: "borderWidths"
    };
    config6.borderRightColor = {
      property: "borderRightColor",
      scale: "colors"
    };
    config6.borderRightStyle = {
      property: "borderRightStyle",
      scale: "borderStyles"
    };
    border = system(config6);
    index_esm_default7 = border;
  }
});

// node_modules/@styled-system/background/dist/index.esm.js
var config7, background, index_esm_default8;
var init_index_esm9 = __esm({
  "node_modules/@styled-system/background/dist/index.esm.js"() {
    init_index_esm2();
    config7 = {
      background: true,
      backgroundImage: true,
      backgroundSize: true,
      backgroundPosition: true,
      backgroundRepeat: true
    };
    config7.bgImage = config7.backgroundImage;
    config7.bgSize = config7.backgroundSize;
    config7.bgPosition = config7.backgroundPosition;
    config7.bgRepeat = config7.backgroundRepeat;
    background = system(config7);
    index_esm_default8 = background;
  }
});

// node_modules/@styled-system/position/dist/index.esm.js
var defaults4, config8, position, index_esm_default9;
var init_index_esm10 = __esm({
  "node_modules/@styled-system/position/dist/index.esm.js"() {
    init_index_esm2();
    defaults4 = {
      space: [0, 4, 8, 16, 32, 64, 128, 256, 512]
    };
    config8 = {
      position: true,
      zIndex: {
        property: "zIndex",
        scale: "zIndices"
      },
      top: {
        property: "top",
        scale: "space",
        defaultScale: defaults4.space
      },
      right: {
        property: "right",
        scale: "space",
        defaultScale: defaults4.space
      },
      bottom: {
        property: "bottom",
        scale: "space",
        defaultScale: defaults4.space
      },
      left: {
        property: "left",
        scale: "space",
        defaultScale: defaults4.space
      }
    };
    position = system(config8);
    index_esm_default9 = position;
  }
});

// node_modules/@styled-system/space/dist/index.esm.js
var defaults5, isNumber3, getMargin, configs, margin, padding, space;
var init_index_esm11 = __esm({
  "node_modules/@styled-system/space/dist/index.esm.js"() {
    init_index_esm2();
    defaults5 = {
      space: [0, 4, 8, 16, 32, 64, 128, 256, 512]
    };
    isNumber3 = function isNumber4(n) {
      return typeof n === "number" && !isNaN(n);
    };
    getMargin = function getMargin2(n, scale) {
      if (!isNumber3(n)) {
        return get3(scale, n, n);
      }
      var isNegative = n < 0;
      var absolute = Math.abs(n);
      var value = get3(scale, absolute, absolute);
      if (!isNumber3(value)) {
        return isNegative ? "-" + value : value;
      }
      return value * (isNegative ? -1 : 1);
    };
    configs = {};
    configs.margin = {
      margin: {
        property: "margin",
        scale: "space",
        transform: getMargin,
        defaultScale: defaults5.space
      },
      marginTop: {
        property: "marginTop",
        scale: "space",
        transform: getMargin,
        defaultScale: defaults5.space
      },
      marginRight: {
        property: "marginRight",
        scale: "space",
        transform: getMargin,
        defaultScale: defaults5.space
      },
      marginBottom: {
        property: "marginBottom",
        scale: "space",
        transform: getMargin,
        defaultScale: defaults5.space
      },
      marginLeft: {
        property: "marginLeft",
        scale: "space",
        transform: getMargin,
        defaultScale: defaults5.space
      },
      marginX: {
        properties: ["marginLeft", "marginRight"],
        scale: "space",
        transform: getMargin,
        defaultScale: defaults5.space
      },
      marginY: {
        properties: ["marginTop", "marginBottom"],
        scale: "space",
        transform: getMargin,
        defaultScale: defaults5.space
      }
    };
    configs.margin.m = configs.margin.margin;
    configs.margin.mt = configs.margin.marginTop;
    configs.margin.mr = configs.margin.marginRight;
    configs.margin.mb = configs.margin.marginBottom;
    configs.margin.ml = configs.margin.marginLeft;
    configs.margin.mx = configs.margin.marginX;
    configs.margin.my = configs.margin.marginY;
    configs.padding = {
      padding: {
        property: "padding",
        scale: "space",
        defaultScale: defaults5.space
      },
      paddingTop: {
        property: "paddingTop",
        scale: "space",
        defaultScale: defaults5.space
      },
      paddingRight: {
        property: "paddingRight",
        scale: "space",
        defaultScale: defaults5.space
      },
      paddingBottom: {
        property: "paddingBottom",
        scale: "space",
        defaultScale: defaults5.space
      },
      paddingLeft: {
        property: "paddingLeft",
        scale: "space",
        defaultScale: defaults5.space
      },
      paddingX: {
        properties: ["paddingLeft", "paddingRight"],
        scale: "space",
        defaultScale: defaults5.space
      },
      paddingY: {
        properties: ["paddingTop", "paddingBottom"],
        scale: "space",
        defaultScale: defaults5.space
      }
    };
    configs.padding.p = configs.padding.padding;
    configs.padding.pt = configs.padding.paddingTop;
    configs.padding.pr = configs.padding.paddingRight;
    configs.padding.pb = configs.padding.paddingBottom;
    configs.padding.pl = configs.padding.paddingLeft;
    configs.padding.px = configs.padding.paddingX;
    configs.padding.py = configs.padding.paddingY;
    margin = system(configs.margin);
    padding = system(configs.padding);
    space = compose(margin, padding);
  }
});

// node_modules/@styled-system/shadow/dist/index.esm.js
var shadow, index_esm_default10;
var init_index_esm12 = __esm({
  "node_modules/@styled-system/shadow/dist/index.esm.js"() {
    init_index_esm2();
    shadow = system({
      boxShadow: {
        property: "boxShadow",
        scale: "shadows"
      },
      textShadow: {
        property: "textShadow",
        scale: "shadows"
      }
    });
    index_esm_default10 = shadow;
  }
});

// node_modules/@styled-system/variant/dist/index.esm.js
var variant, buttonStyle, textStyle, colorStyle;
var init_index_esm13 = __esm({
  "node_modules/@styled-system/variant/dist/index.esm.js"() {
    init_index_esm2();
    init_index_esm();
    variant = function variant2(_ref) {
      var _config;
      var scale = _ref.scale, _ref$prop = _ref.prop, prop = _ref$prop === void 0 ? "variant" : _ref$prop, _ref$variants = _ref.variants, variants = _ref$variants === void 0 ? {} : _ref$variants, key = _ref.key;
      var sx;
      if (Object.keys(variants).length) {
        sx = function sx2(value, scale2, props2) {
          return index_esm_default(get3(scale2, value, null))(props2.theme);
        };
      } else {
        sx = function sx2(value, scale2) {
          return get3(scale2, value, null);
        };
      }
      sx.scale = scale || key;
      sx.defaults = variants;
      var config9 = (_config = {}, _config[prop] = sx, _config);
      var parser = createParser(config9);
      return parser;
    };
    buttonStyle = variant({
      key: "buttons"
    });
    textStyle = variant({
      key: "textStyles",
      prop: "textStyle"
    });
    colorStyle = variant({
      key: "colorStyles",
      prop: "colors"
    });
  }
});

// node_modules/styled-system/dist/index.esm.js
var index_esm_exports2 = {};
__export(index_esm_exports2, {
  alignContent: () => alignContent,
  alignItems: () => alignItems,
  alignSelf: () => alignSelf,
  background: () => background,
  backgroundImage: () => backgroundImage,
  backgroundPosition: () => backgroundPosition,
  backgroundRepeat: () => backgroundRepeat,
  backgroundSize: () => backgroundSize,
  border: () => border,
  borderBottom: () => borderBottom,
  borderColor: () => borderColor,
  borderLeft: () => borderLeft,
  borderRadius: () => borderRadius,
  borderRight: () => borderRight,
  borderStyle: () => borderStyle,
  borderTop: () => borderTop,
  borderWidth: () => borderWidth,
  borders: () => index_esm_default7,
  bottom: () => bottom,
  boxShadow: () => index_esm_default10,
  buttonStyle: () => buttonStyle,
  color: () => color,
  colorStyle: () => colorStyle,
  compose: () => compose,
  createParser: () => createParser,
  createStyleFunction: () => createStyleFunction,
  display: () => display,
  flex: () => flex,
  flexBasis: () => flexBasis,
  flexDirection: () => flexDirection,
  flexGrow: () => flexGrow,
  flexShrink: () => flexShrink,
  flexWrap: () => flexWrap,
  flexbox: () => flexbox,
  fontFamily: () => fontFamily,
  fontSize: () => fontSize,
  fontStyle: () => fontStyle,
  fontWeight: () => fontWeight,
  get: () => get3,
  grid: () => grid,
  gridArea: () => gridArea,
  gridAutoColumns: () => gridAutoColumns,
  gridAutoFlow: () => gridAutoFlow,
  gridAutoRows: () => gridAutoRows,
  gridColumn: () => gridColumn,
  gridColumnGap: () => gridColumnGap,
  gridGap: () => gridGap,
  gridRow: () => gridRow,
  gridRowGap: () => gridRowGap,
  gridTemplateAreas: () => gridTemplateAreas,
  gridTemplateColumns: () => gridTemplateColumns,
  gridTemplateRows: () => gridTemplateRows,
  height: () => height,
  justifyContent: () => justifyContent,
  justifyItems: () => justifyItems,
  justifySelf: () => justifySelf,
  layout: () => layout,
  left: () => left,
  letterSpacing: () => letterSpacing,
  lineHeight: () => lineHeight,
  margin: () => margin,
  maxHeight: () => maxHeight,
  maxWidth: () => maxWidth,
  minHeight: () => minHeight,
  minWidth: () => minWidth,
  opacity: () => opacity,
  order: () => order,
  overflow: () => overflow,
  overflowX: () => overflowX,
  overflowY: () => overflowY,
  padding: () => padding,
  position: () => position,
  right: () => right,
  shadow: () => shadow,
  size: () => size,
  space: () => space,
  style: () => style,
  system: () => system,
  textAlign: () => textAlign,
  textShadow: () => index_esm_default10,
  textStyle: () => textStyle,
  top: () => top,
  typography: () => typography,
  variant: () => variant,
  verticalAlign: () => verticalAlign,
  width: () => width,
  zIndex: () => zIndex
});
var width, height, minWidth, minHeight, maxWidth, maxHeight, size, verticalAlign, display, overflow, overflowX, overflowY, opacity, fontSize, fontFamily, fontWeight, lineHeight, textAlign, fontStyle, letterSpacing, alignItems, alignContent, justifyItems, justifyContent, flexWrap, flexDirection, flex, flexGrow, flexShrink, flexBasis, justifySelf, alignSelf, order, gridGap, gridColumnGap, gridRowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea, borderWidth, borderStyle, borderColor, borderTop, borderRight, borderBottom, borderLeft, borderRadius, backgroundImage, backgroundSize, backgroundPosition, backgroundRepeat, zIndex, top, right, bottom, left, style;
var init_index_esm14 = __esm({
  "node_modules/styled-system/dist/index.esm.js"() {
    init_index_esm2();
    init_index_esm3();
    init_index_esm4();
    init_index_esm5();
    init_index_esm6();
    init_index_esm7();
    init_index_esm8();
    init_index_esm9();
    init_index_esm10();
    init_index_esm2();
    init_index_esm11();
    init_index_esm4();
    init_index_esm3();
    init_index_esm5();
    init_index_esm6();
    init_index_esm8();
    init_index_esm9();
    init_index_esm10();
    init_index_esm7();
    init_index_esm12();
    init_index_esm12();
    init_index_esm13();
    init_index_esm8();
    width = index_esm_default2.width;
    height = index_esm_default2.height;
    minWidth = index_esm_default2.minWidth;
    minHeight = index_esm_default2.minHeight;
    maxWidth = index_esm_default2.maxWidth;
    maxHeight = index_esm_default2.maxHeight;
    size = index_esm_default2.size;
    verticalAlign = index_esm_default2.verticalAlign;
    display = index_esm_default2.display;
    overflow = index_esm_default2.overflow;
    overflowX = index_esm_default2.overflowX;
    overflowY = index_esm_default2.overflowY;
    opacity = index_esm_default3.opacity;
    fontSize = index_esm_default4.fontSize;
    fontFamily = index_esm_default4.fontFamily;
    fontWeight = index_esm_default4.fontWeight;
    lineHeight = index_esm_default4.lineHeight;
    textAlign = index_esm_default4.textAlign;
    fontStyle = index_esm_default4.fontStyle;
    letterSpacing = index_esm_default4.letterSpacing;
    alignItems = index_esm_default5.alignItems;
    alignContent = index_esm_default5.alignContent;
    justifyItems = index_esm_default5.justifyItems;
    justifyContent = index_esm_default5.justifyContent;
    flexWrap = index_esm_default5.flexWrap;
    flexDirection = index_esm_default5.flexDirection;
    flex = index_esm_default5.flex;
    flexGrow = index_esm_default5.flexGrow;
    flexShrink = index_esm_default5.flexShrink;
    flexBasis = index_esm_default5.flexBasis;
    justifySelf = index_esm_default5.justifySelf;
    alignSelf = index_esm_default5.alignSelf;
    order = index_esm_default5.order;
    gridGap = index_esm_default6.gridGap;
    gridColumnGap = index_esm_default6.gridColumnGap;
    gridRowGap = index_esm_default6.gridRowGap;
    gridColumn = index_esm_default6.gridColumn;
    gridRow = index_esm_default6.gridRow;
    gridAutoFlow = index_esm_default6.gridAutoFlow;
    gridAutoColumns = index_esm_default6.gridAutoColumns;
    gridAutoRows = index_esm_default6.gridAutoRows;
    gridTemplateColumns = index_esm_default6.gridTemplateColumns;
    gridTemplateRows = index_esm_default6.gridTemplateRows;
    gridTemplateAreas = index_esm_default6.gridTemplateAreas;
    gridArea = index_esm_default6.gridArea;
    borderWidth = index_esm_default7.borderWidth;
    borderStyle = index_esm_default7.borderStyle;
    borderColor = index_esm_default7.borderColor;
    borderTop = index_esm_default7.borderTop;
    borderRight = index_esm_default7.borderRight;
    borderBottom = index_esm_default7.borderBottom;
    borderLeft = index_esm_default7.borderLeft;
    borderRadius = index_esm_default7.borderRadius;
    backgroundImage = index_esm_default8.backgroundImage;
    backgroundSize = index_esm_default8.backgroundSize;
    backgroundPosition = index_esm_default8.backgroundPosition;
    backgroundRepeat = index_esm_default8.backgroundRepeat;
    zIndex = index_esm_default9.zIndex;
    top = index_esm_default9.top;
    right = index_esm_default9.right;
    bottom = index_esm_default9.bottom;
    left = index_esm_default9.left;
    style = function style2(_ref) {
      var prop = _ref.prop, cssProperty = _ref.cssProperty, alias = _ref.alias, key = _ref.key, transformValue = _ref.transformValue, scale = _ref.scale, properties = _ref.properties;
      var config9 = {};
      config9[prop] = createStyleFunction({
        properties,
        property: cssProperty || prop,
        scale: key,
        defaultScale: scale,
        transform: transformValue
      });
      if (alias)
        config9[alias] = config9[prop];
      var parse = createParser(config9);
      return parse;
    };
  }
});

// node_modules/@styled-system/should-forward-prop/node_modules/@emotion/memoize/dist/emotion-memoize.browser.esm.js
function memoize(fn) {
  var cache = /* @__PURE__ */ Object.create(null);
  return function(arg) {
    if (cache[arg] === void 0)
      cache[arg] = fn(arg);
    return cache[arg];
  };
}
var emotion_memoize_browser_esm_default;
var init_emotion_memoize_browser_esm = __esm({
  "node_modules/@styled-system/should-forward-prop/node_modules/@emotion/memoize/dist/emotion-memoize.browser.esm.js"() {
    emotion_memoize_browser_esm_default = memoize;
  }
});

// node_modules/@emotion/memoize/dist/memoize.browser.esm.js
function memoize2(fn) {
  var cache = {};
  return function(arg) {
    if (cache[arg] === void 0)
      cache[arg] = fn(arg);
    return cache[arg];
  };
}
var memoize_browser_esm_default;
var init_memoize_browser_esm = __esm({
  "node_modules/@emotion/memoize/dist/memoize.browser.esm.js"() {
    memoize_browser_esm_default = memoize2;
  }
});

// node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.esm.js
var reactPropsRegex, index, is_prop_valid_browser_esm_default;
var init_is_prop_valid_browser_esm = __esm({
  "node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.esm.js"() {
    init_memoize_browser_esm();
    reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
    index = memoize_browser_esm_default(
      function(prop) {
        return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
      }
      /* Z+1 */
    );
    is_prop_valid_browser_esm_default = index;
  }
});

// node_modules/@styled-system/should-forward-prop/dist/index.esm.js
var index_esm_exports3 = {};
__export(index_esm_exports3, {
  createShouldForwardProp: () => createShouldForwardProp,
  default: () => index_esm_default11,
  props: () => props
});
var all, props, createShouldForwardProp, index_esm_default11;
var init_index_esm15 = __esm({
  "node_modules/@styled-system/should-forward-prop/dist/index.esm.js"() {
    init_emotion_memoize_browser_esm();
    init_is_prop_valid_browser_esm();
    init_index_esm14();
    all = compose(space, typography, color, layout, flexbox, border, background, position, grid, shadow, buttonStyle, textStyle, colorStyle);
    props = all.propNames;
    createShouldForwardProp = function createShouldForwardProp2(props2) {
      var regex = new RegExp("^(" + props2.join("|") + ")$");
      return emotion_memoize_browser_esm_default(function(prop) {
        return is_prop_valid_browser_esm_default(prop) && !regex.test(prop);
      });
    };
    index_esm_default11 = createShouldForwardProp(props);
  }
});

export {
  memoize_browser_esm_default,
  init_memoize_browser_esm,
  is_prop_valid_browser_esm_default,
  init_is_prop_valid_browser_esm,
  index_esm_exports,
  init_index_esm,
  index_esm_exports2,
  init_index_esm14 as init_index_esm2,
  index_esm_exports3,
  init_index_esm15 as init_index_esm3
};
//# sourceMappingURL=chunk-TAV5FNPY.js.map
